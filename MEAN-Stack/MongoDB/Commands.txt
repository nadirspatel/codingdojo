1. Start MongoDaemon: sudo mongod 

2. Go into MongoDB shell: sudo mongo

Show all databases: show database

Show current database selected: db

Create database: use test_app

Delete database: db.DropDatabase() // deletes current db in use

Use database: db.test_app

Show tables: show collections

Create table: db.createCollection('users') // create users table

Drop table: db.users.drop() // drop users table

Insert data: db.users.insert({name: "Nadir"}) // inserts name:Nadir into users table

Create - Inserting a document into a collection: db.ninjas.insert({name: "Nadir", belt: "black", status: "awesome"})

Read - Retreiving documents from a collection: db.ninjas.find.pretty()({name: "Trey"}) // pretty() makes results easier to read
                             Find by objectID: db.ninjas.find({_id: ObjectId("5462a78e514e258182f4c69a")})
If I wanted to get all the Dojos whose number of students is greater than 15, I would run the following:
db.dojos.find({number_of_students: {$gt: 15}})

Update documents in a collection: db.ninjas.update({name: "Trey"}, {location: "Mountain View"})

($push) If we wanted to add an element in the interests array. The operator we would use is called the $push operator, which should sound very familiar. To add the interest 'snowboarding' to the student document, we would run:
db.students.update({_id: ObjectId("5463d871a6a96d5ed6252f4d")}, {$push: {interests: 'snowboarding'}})

($pop) Removes either the first or last element from an array. EX:
db.COLLECTION.update({QUERY}, {$pop: {array_key: (1 or -1)}})
Use 1 for the last item in the array, -1 for the first item.

($addtoSet) It functions just like $push.  However, $addToSet only adds to the specified array if the value doesn't already exist (thereby preventing duplicate entries).

($pull) Removes a specified value from an array, unlike $pop, which removes by location. Ex:
db.COLLECTION.update({QUERY}, {$pull: {array_key: VALUE}})
This will remove all instances of VALUE from the documents with the array specified by the array_key that match QUERY.